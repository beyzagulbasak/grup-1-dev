# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1SSLGV_rf5Hf2jKEwTNajTFrCTe_352MY
"""

sonuclar= [];
isim = input("Adınız nedir? ")
print(f"Merhaba, {isim}! Memnun Oldum.")
yaş = input ("Yaşınız nedir?")
print(f":)")
hane = int(input("Evde kaç kişi yaşıyorsunuz?"))
if hane < 4:
   print("Evde az kişi yaşıyorsunuz")
else:
   print("Çok kalabalıksınız")
def kargo():
    cevap = input("Bir şey satın alırken o ürünün nereden gönderileceğine bakar mısın? (evet/hayır): ").lower()

    if cevap == "evet":
        print("Tebrik ederim çevreye duyarlı birisiniz.")
    elif cevap == "hayır":
        print("Çevre konusunda daha duyarlı olmaslısın")
    else:
        print("Geçerli bir cevap girmediğiniz için tavsiye veremiyoruz.")

kargo()
def priz():
    cevap = input("Kullanmadığın teknolojik aletlerin fişlerini prizden çeker misin? (evet/hayır):").lower()

    if cevap=="evet":
       print("Tebrik ederim elektriği boşa harcamıyorsunuz.")
    elif cevap == "hayır":
        print("Elektriği boşa harcamamalısınız")
    else:
        print("Geçerli bir cevap girmediğiniz için tavsiye veremiyoruz.")

priz()
def yemek():
    cevap = input("Yiyecekleri bitiremediğinde çöpe atar mısın? (evet/hayır): ").lower()

    if cevap=="evet":
       print("Tebrik ederim israf etmiyorsun.")
    elif cevap == "hayır":
        print("Yemekleri israf etmemelisin")
    else:
        print("Geçerli bir cevap girmediğiniz için tavsiye veremiyoruz.")

yemek()
def elektrik_karbon_ayak_izi_hesapla(elektrik_tuketimi, karbon_emisyon_katsayisi):
    return elektrik_tuketimi * karbon_emisyon_katsayisi

elektrik_kullaniyor_mu = input("Elektrik kullanıyor musunuz? (evet/hayır): ").lower()

if elektrik_kullaniyor_mu == "evet":
    elektrik_tuketimi = float(input("Aylık elektrik tüketiminiz (kWh): "))
    karbon_emisyon_katsayisi = float(input("Elektrik üretim kaynaklarına bağlı karbon emisyon katsayısı (kg CO2/kWh): "))

    elektrik_karbon_ayak_izi = elektrik_karbon_ayak_izi_hesapla(elektrik_tuketimi, karbon_emisyon_katsayisi)
    sonuclar.append(elektrik_karbon_ayak_izi)
    if elektrik_karbon_ayak_izi > 0:
        print("Elektrik Karbon Ayak İzi: {:.2f} kg CO2".format(elektrik_karbon_ayak_izi))
    else:
        print("Dikkat: Elektrik kullanıldığı halde karbon ayak izi hesaplanamadı.")
else:
    print("Elektrik kullanılmadığı için karbon ayak izi hesaplanmayacak.")
    sonuclar.append(0)
def dogalgaz_karbon_ayak_izi_hesapla(dogalgaz_tuketimi, karbon_emisyon_katsayisi):
    return dogalgaz_tuketimi * karbon_emisyon_katsayisi

dogalgaz_kullaniyor_mu = input("Doğalgaz kullanıyor musunuz? (evet/hayır): ").lower()

if dogalgaz_kullaniyor_mu == "evet":
    dogalgaz_tuketimi = float(input("Aylık doğalgaz tüketiminiz (kWh): "))
    karbon_emisyon_katsayisi = float(input("Doğalgaz tüketimine bağlı karbon emisyon katsayısı (Kg CO2): "))

    dogalgaz_karbon_ayak_izi = dogalgaz_karbon_ayak_izi_hesapla(dogalgaz_tuketimi, karbon_emisyon_katsayisi)
    sonuclar.append(dogalgaz_karbon_ayak_izi)
    if dogalgaz_karbon_ayak_izi > 0:
        print("Doğalgaz Karbon Ayak İzi: {:.2f} Kg CO2".format(dogalgaz_karbon_ayak_izi))
    else:
        print("Doğalgaz kullanıldığı halde karbon ayak izi hesaplanamadı.")
else:
    print("Doğalgaz kullanılmadığı için karbon ayak izi hesaplanmayacak")
    sonuclar.append(0)
def su_karbon_ayak_izi_hesapla(su_tüketimi, karbon_emisyon_katsayisi):

    return su_tüketimi * karbon_emisyon_katsayisi

su_kullaniliyor_mu = input("Su kullanıyor musunuz? (evet/hayır): ").lower()

if su_kullaniliyor_mu == "evet":
    su_tüketimi = float(input("Aylık su tüketiminiz (m³): "))
    karbon_emisyon_katsayisi = float(input("Su tüketimine bağlı karbon emisyon katsayısı (ton CO₂/m³): "))

    su_karbon_ayak_izi = su_karbon_ayak_izi_hesapla(su_tüketimi, karbon_emisyon_katsayisi)
    sonuclar.append(su_karbon_ayak_izi)
    if su_karbon_ayak_izi > 0:
        print("Su Karbon Ayak İzi: {:.2f} ton CO₂".format(su_karbon_ayak_izi))
    else:
        print("Su kullanıldığı halde karbon ayak izi hesaplanamadı.")
else:
    print("Su kullanılmadığı için karbon ayak izi hesaplanmayacak.")
    sonuclar.append(0)
class LEDAmpul:
    def __init__(self, watt, kullanma_suresi):
        self.watt = watt
        self.kullanma_suresi = kullanma_suresi

    def kullanma_karbon_ayak_izi(self, enerji_emisyon_orani):
        kullanma_ayak_izi = self.watt * self.kullanma_suresi * enerji_emisyon_orani
        return kullanma_ayak_izi

class CFLAmpul:
    def __init__(self, watt, kullanma_suresi):
        self.watt = watt
        self.kullanma_suresi = kullanma_suresi

    def kullanma_karbon_ayak_izi(self, enerji_emisyon_orani):
        kullanma_ayak_izi = self.watt * self.kullanma_suresi * enerji_emisyon_orani
        return kullanma_ayak_izi

class AkkorAmpul:
    def __init__(self, watt, kullanma_suresi):
        self.watt = watt
        self.kullanma_suresi = kullanma_suresi

    def kullanma_karbon_ayak_izi(self, enerji_emisyon_orani):
        kullanma_ayak_izi = self.watt * self.kullanma_suresi * enerji_emisyon_orani
        return kullanma_ayak_izi

def main():
    ampul_turu = input("Hangi tür ampul kullanıyorsunuz? (LED, CFL, Akkor): ").lower()
    watt_degeri = float(input("Ampulün gücünü girin (watt): "))
    kullanim_suresi = float(input("Ampulün kullanım süresini girin (saat): "))
    enerji_emisyon_orani = float(input("Kullanılan enerjinin karbon emisyon oranını girin: "))

    if ampul_turu == 'led':
        ampul = LEDAmpul(watt=watt_degeri, kullanma_suresi=kullanim_suresi)
    elif ampul_turu == 'cfl':
        ampul = CFLAmpul(watt=watt_degeri, kullanma_suresi=kullanim_suresi)
    elif ampul_turu == 'akkor':
        ampul = AkkorAmpul(watt=watt_degeri, kullanma_suresi=kullanim_suresi)
    else:
        print("Geçersiz ampul türü.")
        return

    kullanma_karbon_ayak_izi = ampul.kullanma_karbon_ayak_izi(enerji_emisyon_orani)
    sonuclar.append(kullanma_karbon_ayak_izi)
    print(f"{ampul_turu.capitalize()} Ampulün Kullanım Karbon Ayak İzi: {kullanma_karbon_ayak_izi} kgCO2")

if __name__ == "__main__":
    main()
def deterjan_karbon_ayak_izi_hesapla(deterjan_tuketimi, karbon_emisyon_katsayisi):
    return deterjan_tuketimi * karbon_emisyon_katsayisi

deterjan_kullaniliyor_mu = input("Deterjan kullanıyor musunuz? (evet/hayır):").lower()

if deterjan_kullaniliyor_mu == "evet":
    deterjan_tuketimi = float(input("Aylık deterjan tüketiminiz (litre):"))
    karbon_emisyon_katsayisi = float(input("Deterjan tüketimine bağlı karbon emisyon katsayısı (g CO2/litre): "))

    deterjan_karbon_ayak_izi = deterjan_karbon_ayak_izi_hesapla(deterjan_tuketimi, karbon_emisyon_katsayisi)
    sonuclar.append(deterjan_karbon_ayak_izi)
    if deterjan_karbon_ayak_izi > 0:
        print("Deterjan Karbon Ayak İzi: {:.2f} gram CO2".format(deterjan_karbon_ayak_izi))
    else:
        print("Dikkat: Deterjan kullanıldığı halde karbon ayak izi hesaplanamadı.")

else:
    print("Deterjan kullanılmadığı için karbon ayak izi hesaplanmayacak.")
    sonuclar.append(0)
def camasir_makinesi_karbon_ayak_izi_hesapla(enerji_tuketimi, su_tuketimi, deterjan_karbon_ayak_izi):

    enerji_katsayısı = 1.5
    su_katsayısı = 0.2
    enerji_karbon_ayak_izi = enerji_tüketimi * enerji_katsayısı

    su_karbon_ayak_izi = su_tüketimi * su_katsayısı

    toplam_karbon_ayak_izi = enerji_karbon_ayak_izi + su_karbon_ayak_izi + deterjan_karbon_ayak_izi

    return toplam_karbon_ayak_izi
camasir_makinesi_kullanıyor_mu = input("Çamaşır makinesi kullanıyor musunuz? (evet/hayır): ").lower()

if camasir_makinesi_kullanıyor_mu == "evet":
    enerji_tüketimi = float(input("Çamaşır makinesinin aylık enerji tüketimi (kWh): "))
    su_tüketimi = float(input("Çamaşır makinesinin aylık su tüketimi (litre): "))
    deterjan_karbon_ayak_izi = float(input("Kullanılan deterjanın karbon ayak izi (kg CO2): "))

    toplam_karbon_ayak_izi = camasir_makinesi_karbon_ayak_izi_hesapla(enerji_tüketimi, su_tüketimi, deterjan_karbon_ayak_izi)
    sonuclar.append(toplam_karbon_ayak_izi)
    print("Çamaşır Makinesi Karbon Ayak İzi: {:.2f} kg CO2".format(toplam_karbon_ayak_izi))
else:
    print("Çamaşır makinesi kullanılmadığı için karbon ayak izi hesaplanmayacak.")
    sonuclar.append(0)

def bulaşık_makinesi_karbon_ayak_izi_hesapla(enerji_tüketimi, su_tüketimi, deterjan_karbon_ayak_izi):
    enerji_katsayisi = 1.5
    su_katsayisi = 0.5

    enerji_karbon_ayak_izi = enerji_tüketimi * enerji_katsayisi
    su_karbon_ayak_izi = su_tüketimi * su_katsayisi

    toplam_karbon_ayak_izi = enerji_karbon_ayak_izi + su_karbon_ayak_izi + deterjan_karbon_ayak_izi

    return toplam_karbon_ayak_izi

bulaşık_makinesi_kullanıyor_mu = input("Bulaşık makinesi kullanıyor musunuz? (evet/hayır): ").lower()

if bulaşık_makinesi_kullanıyor_mu == "evet":
    enerji_tüketimi = float(input("Bulaşık makinesinin aylık enerji tüketimi (kWh): "))
    su_tüketimi = float(input("Bulaşık makinesinin aylık su tüketimi (litre): "))
    deterjan_karbon_ayak_izi = float(input("Kullanılan deterjanın karbon ayak izi (kg CO2): "))

    toplam_karbon_ayak_izi = bulaşık_makinesi_karbon_ayak_izi_hesapla(enerji_tüketimi, su_tüketimi, deterjan_karbon_ayak_izi)
    sonuclar.append(toplam_karbon_ayak_izi)
    print("Bulaşık makinesi karbon ayak izi: {:.2f} kg CO2".format(toplam_karbon_ayak_izi))
else:
    print("Bulaşık makinesi kullanılmadığı için karbon ayak izi hesaplanmayacak.")
    sonuclar.append(0)

def camasir_kurutma_karbon_ayak_izi_hesapla(enerji_tuketimi, enerji_kullanim_katsayisi):
    return enerji_tuketimi * enerji_kullanim_katsayisi

camasir_kurutma_kullaniyor_mu = input("Çamaşır kurutma makinesi kullanıyor musunuz? (evet/hayır): ").lower()

if camasir_kurutma_kullaniyor_mu == "evet":
    enerji_tuketimi = float(input("Çamaşır kurutma makinesenin aylık enerji tüketimi (kWh): "))
    enerji_kullanim_katsayisi = float(input("Enerji kaynağına bağlı enerji kullanım katsayısı: "))

    toplam_karbon_ayak_izi = camasir_kurutma_karbon_ayak_izi_hesapla(enerji_tuketimi, enerji_kullanim_katsayisi)
    sonuclar.append(toplam_karbon_ayak_izi)
    print("Çamaşır kurutma makinesi karbon ayak izi: {:.2f} kg CO2".format(toplam_karbon_ayak_izi))
else:
    print("Çamaşır kurutma makinesi kullanılmadığı için karbon ayak izi hesaplanmayacak.")
    sonuclar.append(0)
def elektrik_supurgesi_karbon_ayak_izi_hesapla(enerji_tuketimi, enerji_kullanim_katsayisi):
    return enerji_tuketimi * enerji_kullanim_katsayisi

elektrik_supurgesi_kullaniyor_mu = input("Elektrik süpürgesi kullanıyor musunuz? (evet/hayır): ").lower()

if elektrik_supurgesi_kullaniyor_mu == "evet":
    enerji_tuketimi = float(input("Elektrik süpürgesinin aylık enerji tüketimi (kWh): "))
    enerji_kullanım_katsayisi = float(input("Enerji kaynağına bağlı enerji kullanım katsayısı: "))

    toplam_karbon_ayak_izi = elektrik_supurgesi_karbon_ayak_izi_hesapla(enerji_tuketimi, enerji_kullanım_katsayisi)
    sonuclar.append(toplam_karbon_ayak_izi)
    print("Elektrik süpürgesi karbon ayak izi: {:.2f} kg CO2".format(toplam_karbon_ayak_izi))
else:
    print("Elektrik süpürgesi kullanılmadığı için karbon ayak izi hesaplanmayacak")
    sonuclar.append(0)
def dus_karbon_ayak_izi_hesapla(dus_suresi, su_tuketim_katsayisi, su_enerji_katsayisi):
    dus_basligi_verimliligi = 0.8

    su_tuketimi = dus_suresi * dus_basligi_verimliligi * su_tuketim_katsayisi
    enerji_tuketimi = su_tuketimi * su_enerji_katsayisi

    return enerji_tuketimi

duş_alıyor_mu = input("Duş alıyor musunuz? (evet/hayır):").lower()

if duş_alıyor_mu == "evet":
    dus_suresi = float(input("Duşta geçirdiğiniz süreyi dakika cinsinden giriniz: "))
    su_tuketim_katsayisi = float(input("Su tüketim katsayısını giriniz (litre/dakika): "))
    su_enerji_katsayisi = float(input("Su ısısını sağlamak için kullanılan enerjinin kaynağına bağlı katsayıyı girin:"))

    toplam_karbon_ayak_izi = dus_karbon_ayak_izi_hesapla(dus_suresi, su_tuketim_katsayisi, su_enerji_katsayisi)
    sonuclar.append(toplam_karbon_ayak_izi)
    print("Duşunuzun karbon ayak izi: {:.2f} kg CO2".format(toplam_karbon_ayak_izi))
else:
    print("Duş alınmadığı için karbon ayak izi hesaplanmayacak")
    sonuclar.append(0)
class Yakit:
    def __init__(self, tuketilen_miktar, emisyon_orani):
        self.tuketilen_miktar = tuketilen_miktar
        self.emisyon_orani = emisyon_orani

    def kullanma_karbon_ayak_izi(self):
        kullanma_ayak_izi = self.tuketilen_miktar * self.emisyon_orani
        return kullanma_ayak_izi

yakit_turu = input("Hangi tür yakıt kullanıyorsunuz? (benzin, dizel, doğalgaz, vs.): ").lower()
tuketilen_miktar = float(input("Yakıtın tüketildiği miktarı girin (litre veya m^3): "))
emisyon_orani = float(input("Yakıtın karbon emisyon oranını girin: "))

yakit = Yakit(tuketilen_miktar=tuketilen_miktar, emisyon_orani=emisyon_orani)

kullanma_karbon_ayak_izi = yakit.kullanma_karbon_ayak_izi()
sonuclar.append(kullanma_karbon_ayak_izi)
print(f"{yakit_turu.capitalize()} Yakıtın Kullanım Karbon Ayak İzi: {kullanma_karbon_ayak_izi} kgCO2")
def toplu_tasima_karbon_ayak_izi_hesapla():
    print("Toplu Taşıma Kullanım Karbon Ayak İzi Hesaplama")

    haftalik_seyahat_sayisi = int(input("Haftada kaç gün toplu taşıma kullanıyorsunuz? : "))
    seyahat_maliyeti = float(input("Bir seyahat için ortalama maliyet nedir? (TL): "))
    yillik_seyahat_sayisi = haftalik_seyahat_sayisi * 52

    karbon_ayak_izi = yillik_seyahat_sayisi * seyahat_maliyeti
    sonuclar.append(karbon_ayak_izi)
    print(f"\nYıllık Toplu Taşıma Kullanım Karbon Ayak İzi: {karbon_ayak_izi} kgCO2")

toplu_tasima_karbon_ayak_izi_hesapla()
class Arac:
    def __init__(self, arac_turu, motor_hacmi, gunluk_kullanim_suresi, km_basina_karbon_emisyon):
        self.arac_turu = arac_turu
        self.motor_hacmi = motor_hacmi
        self.gunluk_kullanim_suresi = gunluk_kullanim_suresi
        self.km_basina_karbon_emisyon = km_basina_karbon_emisyon

    def kullanma_karbon_ayak_izi(self, gunluk_km):
        kullanma_ayak_izi = self.gunluk_kullanim_suresi * gunluk_km * self.km_basina_karbon_emisyon
        return kullanma_ayak_izi

arac_turu = input("Araç türünü girin (otomobil, SUV, kamyonet, vb.): ").lower()
motor_hacmi = float(input("Araç motor hacmini girin (cc): "))
gunluk_kullanim_suresi = float(input("Günlük kullanım süresini girin (saat): "))
km_basina_karbon_emisyon = float(input("Araç başına kilometre başına düşen karbon emisyon oranını girin (kgCO2/km): "))
gunluk_km = float(input("Günlük kaç kilometre yol yapıyorsunuz: "))

arac = Arac(arac_turu=arac_turu, motor_hacmi=motor_hacmi,
            gunluk_kullanim_suresi=gunluk_kullanim_suresi,
            km_basina_karbon_emisyon=km_basina_karbon_emisyon)

kullanma_karbon_ayak_izi = arac.kullanma_karbon_ayak_izi(gunluk_km)
sonuclar.append(kullanma_karbon_ayak_izi)
print(f"\n{arac_turu} Araç Kullanımının Günlük Karbon Ayak İzi: {kullanma_karbon_ayak_izi} kgCO2")
class UcakKarbonAyakIziHesaplama:
    def __init__(self, ucus_sayisi):
        self.ucus_sayisi = ucus_sayisi
        self.karbon_oranlari = {
            "kısa mesafe": 0.2,   # Örnek oran: kgCO2/km
            "uzun mesafe": 0.1,   # Örnek oran: kgCO2/km
            "diğer": 0.15         # Örnek oran: kgCO2/km
        }

    def sorulari_sor(self):
        self.ucus_mesafesi = float(input("Bir uçuşun ortalama mesafesini kilometre cinsinden girin: "))
        self.ucak_tipi = input("Uçak tipini seçin (kısa mesafe/uzun mesafe/diğer): ").lower()
        self.yolcu_sayisi = int(input("Yolcu sayısını girin: "))

    def karbon_ayak_izi_hesapla(self):
        if self.ucak_tipi not in self.karbon_oranlari:
            print("Geçersiz uçak tipi! Lütfen doğru bir uçak tipi seçin.")
            return

        karbon_orani = self.karbon_oranlari[self.ucak_tipi]
        karbon_ayak_izi = self.ucus_sayisi * self.ucus_mesafesi * self.yolcu_sayisi * karbon_orani
        return karbon_ayak_izi

ucus_sayisi = int(input("Son 1 yıl içinde kaç tane uçak seyahati yaptınız: "))

ucak_hesaplayici = UcakKarbonAyakIziHesaplama(ucus_sayisi)

ucak_hesaplayici.sorulari_sor()
karbon_ayak_izi = ucak_hesaplayici.karbon_ayak_izi_hesapla()
sonuclar.append(karbon_ayak_izi)
if karbon_ayak_izi is not None:
    print(f"\nUçak Kullanımının Tahmini Karbon Ayak İzi: {karbon_ayak_izi} kgCO2")
def sigara_tavsiye():
    cevap = input("Sigara içiyor musunuz? (evet/hayır): ").lower()

    if cevap == "evet":
        print("Çok zararlı içme, sağlığınız için önemli.")
    elif cevap == "hayır":
        print("Kralsın, sağlığınıza dikkat ediyorsunuz!")
    else:
        print("Geçerli bir cevap girmediğiniz için tavsiye veremiyoruz.")

sigara_tavsiye()
class AtikKarbonAyakIziHesaplama:
    def __init__(self):
        self.karbon_oranlari = {
            "metal": 0.1,   # Örnek oran: kgCO2/kg
            "plastik": 0.2,  # Örnek oran: kgCO2/kg
            "cam": 0.15,    # Örnek oran: kgCO2/kg
            "organik": 0.05  # Örnek oran: kgCO2/kg
        }

    def sorulari_sor(self):
        self.metal_atik = float(input("Aylık metal atık miktarınızı kilogram cinsinden girin: "))
        self.plastik_atik = float(input("Aylık plastik atık miktarınızı kilogram cinsinden girin: "))
        self.cam_atik = float(input("Aylık cam atık miktarınızı kilogram cinsinden girin: "))
        self.organik_atik = float(input("Aylık organik atık miktarınızı kilogram cinsinden girin: "))
        self.geridonusum_aliskanligi = float(input("Geridönüşüm yapıyor musunuz? (1: Evet, 0: Hayır): "))

    def karbon_ayak_izi_hesapla(self):
        toplam_atik_miktari = self.metal_atik + self.plastik_atik + self.cam_atik + self.organik_atik

        karbon_ayak_izi = 0
        for atik_turu in self.karbon_oranlari:
            karbon_ayak_izi += self.karbon_oranlari[atik_turu] * getattr(self, f"{atik_turu}_atik")

        karbon_ayak_izi *= (1 - self.geridonusum_aliskanligi)

        return karbon_ayak_izi

atik_hesaplayici = AtikKarbonAyakIziHesaplama()

atik_hesaplayici.sorulari_sor()
karbon_ayak_izi = atik_hesaplayici.karbon_ayak_izi_hesapla()
sonuclar.append(karbon_ayak_izi)
print(f"\nAylık Atık Üretiminden Tahmini Karbon Ayak İzi: {karbon_ayak_izi} kgCO2")
class EtKarbonAyakIziHesaplama:
    def __init__(self):
        self.karbon_oranlari = {
            "yüksek": 0.3,    # Örnek oran: kgCO2/g
            "orta": 0.2,      # Örnek oran: kgCO2/g
            "düşük": 0.1      # Örnek oran: kgCO2/g
        }

    def sorulari_sor(self):
        self.et_tuketim_sikligi = input("Hangi sıklıkla beyaz et tüketiyorsunuz? (yüksek/orta/düşük): ").lower()

    def karbon_ayak_izi_hesapla(self):
        if self.et_tuketim_sikligi not in self.karbon_oranlari:
            print("Geçersiz tüketim sıklığı! Lütfen doğru bir tüketim sıklığı seçin.")
            return

        karbon_orani = self.karbon_oranlari[self.et_tuketim_sikligi]
        et_miktarı = float(input("Günlük beyaz et tüketiminizi gram cinsinden girin: "))

        karbon_ayak_izi = et_miktarı * karbon_orani
        return karbon_ayak_izi

et_hesaplayici = EtKarbonAyakIziHesaplama()

et_hesaplayici.sorulari_sor()
karbon_ayak_izi = et_hesaplayici.karbon_ayak_izi_hesapla()
sonuclar.append(karbon_ayak_izi)
print(f"\nBeyaz Et Tüketiminden Tahmini Karbon Ayak İzi: {karbon_ayak_izi} kgCO2")

class KirmiziEtKarbonAyakIziHesaplama:
    def __init__(self):
        self.karbon_oranlari = {
            "yüksek": 0.5,    # Örnek oran: kgCO2/g
            "orta": 0.4,      # Örnek oran: kgCO2/g
            "düşük": 0.3      # Örnek oran: kgCO2/g
        }

    def sorulari_sor(self):
        self.et_tuketim_sikligi = input("Hangi sıklıkla kırmızı et tüketiyorsunuz? (yüksek/orta/düşük): ").lower()

    def karbon_ayak_izi_hesapla(self):
        if self.et_tuketim_sikligi not in self.karbon_oranlari:
            print("Geçersiz tüketim sıklığı! Lütfen doğru bir tüketim sıklığı seçin.")
            return

        karbon_orani = self.karbon_oranlari[self.et_tuketim_sikligi]
        et_miktarı = float(input("Günlük kırmızı et tüketiminizi gram cinsinden girin: "))

        karbon_ayak_izi = et_miktarı * karbon_orani
        return karbon_ayak_izi

kirmizi_et_hesaplayici = KirmiziEtKarbonAyakIziHesaplama()

kirmizi_et_hesaplayici.sorulari_sor()
karbon_ayak_izi = kirmizi_et_hesaplayici.karbon_ayak_izi_hesapla()
sonuclar.append(karbon_ayak_izi)
print(f"\nKırmızı Et Tüketiminden Tahmini Karbon Ayak İzi: {karbon_ayak_izi} kgCO2")
class GiyimKarbonAyakIziHesaplama:
    def __init__(self):
        self.karbon_oranlari = {
            "düşük": 0.1,      # Örnek oran: kgCO2/Türk Lirası
            "orta": 0.15,      # Örnek oran: kgCO2/Türk Lirası
            "yüksek": 0.2      # Örnek oran: kgCO2/Türk Lirası
        }

    def sorulari_sor(self):
        self.harcama_duzeyi = input("Aylık giyim harcamanızın düzeyini belirtin (düşük/orta/yüksek): ").lower()

    def karbon_ayak_izi_hesapla(self):
        if self.harcama_duzeyi not in self.karbon_oranlari:
            print("Geçersiz harcama düzeyi! Lütfen doğru bir düzey seçin.")
            return

        karbon_orani = self.karbon_oranlari[self.harcama_duzeyi]
        harcama_miktari = float(input("Aylık giyim harcamanızı Türk Lirası cinsinden girin: "))

        karbon_ayak_izi = harcama_miktari * karbon_orani
        return karbon_ayak_izi

giyim_hesaplayici = GiyimKarbonAyakIziHesaplama()

giyim_hesaplayici.sorulari_sor()
karbon_ayak_izi = giyim_hesaplayici.karbon_ayak_izi_hesapla()
sonuclar.append(karbon_ayak_izi)
print(f"\nGiyim Harcamalarından Tahmini Karbon Ayak İzi: {karbon_ayak_izi} kgCO2")
class EvcilHayvanKarbonAyakIziHesaplama:
    def __init__(self):
        self.karbon_oranlari = {
            "kedi": {
                "gida": 0.2,       # Örnek oran: kgCO2/TL
                "sağlık_bakımı": 0.1  # Örnek oran: kgCO2/TL
            },
            "köpek": {
                "gida": 0.3,       # Örnek oran: kgCO2/TL
                "sağlık_bakımı": 0.2  # Örnek oran: kgCO2/TL
            }
        }

    def sorulari_sor(self):
        self.hayvan_turu = input("Evcil hayvan türünüzü belirtin (kedi/köpek/diğer): ").lower()
        self.gida_harcamasi = float(input("Aylık evcil hayvan gıda harcamanızı Türk Lirası cinsinden girin: "))
        self.saglik_bakimi_harcamasi = float(input("Aylık evcil hayvan sağlık bakım harcamanızı Türk Lirası cinsinden girin: "))

    def karbon_ayak_izi_hesapla(self):
        if self.hayvan_turu not in self.karbon_oranlari:
            print("Geçersiz hayvan türü! Lütfen doğru bir hayvan türü seçin.")
            return

        hayvan_oranlari = self.karbon_oranlari[self.hayvan_turu]
        gida_karbon_orani = hayvan_oranlari["gida"]
        saglik_bakimi_karbon_orani = hayvan_oranlari["sağlık_bakımı"]

        gida_karbon_ayak_izi = self.gida_harcamasi * gida_karbon_orani
        saglik_bakimi_karbon_ayak_izi = self.saglik_bakimi_harcamasi * saglik_bakimi_karbon_orani

        toplam_karbon_ayak_izi = gida_karbon_ayak_izi + saglik_bakimi_karbon_ayak_izi
        return toplam_karbon_ayak_izi

hayvan_hesaplayici = EvcilHayvanKarbonAyakIziHesaplama()

hayvan_hesaplayici.sorulari_sor()
karbon_ayak_izi = hayvan_hesaplayici.karbon_ayak_izi_hesapla()
sonuclar.append(karbon_ayak_izi)
print(f"\nEvcil Hayvanınızın Karbon Ayak İzi: {karbon_ayak_izi} kgCO2")

import matplotlib.pyplot as plt

def grafik_olustur(cevaplar):
    left = [1, 2, 3, 4, 5,6,7,8,9,10,11,12,13,14,15,16,17,18,19]
    plt.xticks(rotation='vertical')
    tick_label = ['Elektrik Kullanımı', 'Doğalgaz Kullanımı', 'Su Kullanımı', 'Ampul Kullanımı', 'Deterjan Tüketimi','Çamaşır Makinesi','Bulaşık Makinesi','Çamaşır Kurutma Makinesi','Elektrik Süpürgesi','Duş','Yakıt Tüketimi','Toplu Taşımı Kullanımı','Araç Kullanımı', 'Uçak Yolculuğu', 'Geri Dönüşüm','Beyaz Et', 'Kırmızı Et', 'Giyim', 'Evcil Hayvan']

    # Grafik oluştur
    plt.bar(left, sonuclar, tick_label = tick_label,
            width = 0.8, color = ['red'])



    # Eksen etiketleri
    plt.xlabel('Soru Numarası')
    plt.ylabel('Sonuç')
    plt.title('Önceki Soruların Sonuçları ve Toplam Sonuç')


    # Grafik penceresi
    plt.show()

grafik_olustur(sonuclar)